within HeatedExample.UserGenVerifScenarios;

model UserGeneratedModel
extends VVDRlib.Verification.VerificationModel;
Design.HeatedElement heatedElement annotation(
    Placement(visible = true, transformation(origin = {6, 6}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
Scenarios.SunnyDay sunnyDay annotation(
    Placement(visible = true, transformation(origin = {-78, 26}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
HeatedExample.Requirements.noOverheating noOverheating(maxT = 35)  annotation(
    Placement(visible = true, transformation(origin = {80, 4}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
HeatedExample.Requirements.switchingDelay switchingDelay(howLong = 4)  annotation(
    Placement(visible = true, transformation(origin = {82, -34}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
equation
  connect(sunnyDay.timeVal, heatedElement.outsideHeat) annotation(
    Line(points = {{-68, 32}, {-22, 32}, {-22, 0}, {-4, 0}}, color = {0, 0, 127}));
connect(sunnyDay.roomT, heatedElement.roomTemp) annotation(
    Line(points = {{-68, 24}, {-26, 24}, {-26, -10}, {18, -10}, {18, 0}}, color = {191, 0, 0}));
connect(heatedElement.objectT, noOverheating.temp) annotation(
    Line(points = {{18, 8}, {69, 8}, {69, 9}}, color = {0, 0, 127}));
connect(heatedElement.switchSignal, switchingDelay.isOn) annotation(
    Line(points = {{18, 6}, {60, 6}, {60, -30}, {72, -30}}, color = {255, 0, 255}));


annotation(
    experiment(StartTime = 0, StopTime = 50, Tolerance = 1e-6, Interval = 0.1));
end UserGeneratedModel;